"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var timerInterval,Tab=function(){function n(t,e){_classCallCheck(this,n),this.id=t,this.HTMLElement=document.getElementById("tab1"),this.counterEl=document.querySelector("#".concat(this.id," .timer__count")),this.time=e,this.defaultTime=e,this.count=1}return _createClass(n,[{key:"updateCounter",value:function(){this.HTMLElement.querySelector(".timer__count").innerHTML="#"+this.count}}]),n}(),tab1=new Tab("tab1",1500),tab2=new Tab("tab2",300),tab3=new Tab("tab3",900),isTimerActive=!1,activeTab=tab1,buttonStartTimer=document.getElementById("startBtn"),buttonSkipTimer=document.getElementById("skipBtn"),buttonsTabs=document.querySelectorAll(".timer__option"),timeDisplay=activeTab.HTMLElement.querySelector(".timer__string");function setTabActive(t){switch(isTimerActive&&resetTimer(),activeTab.HTMLElement.classList.remove("active"),t){case tab1.id:activeTab=tab1;break;case tab2.id:activeTab=tab2;break;case tab3.id:activeTab=tab3}activeTab.HTMLElement.classList.add("active"),timeDisplay=activeTab.HTMLElement.querySelector(".timer__string")}function timeExpired(){++activeTab.count,activeTab.updateCounter(),resetTimer(),activeTab==tab1?((tab1.count-1)%4!=0?setTabActive(tab2.id):(tab1.count-1)%4==0&&setTabActive(tab3.id),tab2.count=tab1.count-1,tab3.count=tab1.count-1,tab2.updateCounter(),tab3.updateCounter()):activeTab!=tab2&&activeTab!=tab3||setTabActive(tab1.id)}function startTimer(t){timerInterval=setInterval(function(){updateDisplayTime(t),t<=0&&timeExpired();t--},1e3),isTimerActive=!0}function pauseTimer(){clearInterval(timerInterval)}function resetTimer(){clearInterval(timerInterval),updateDisplayTime(activeTab.time),buttonStartTimer.classList.remove("disable"),buttonSkipTimer.classList.remove("active"),isTimerActive=!1}function updateDisplayTime(t){var e=(e=Math.floor(t/60))<10?"0"+e:e,t=(t=t%60)<10?"0"+t:t;timeDisplay.innerText=e+":"+t}buttonsTabs.forEach(function(t){t.addEventListener("click",function(t){switch(t.target.id){case"btnTab1":setTabActive(tab1.id);break;case"btnTab2":setTabActive(tab2.id);break;case"btnTab3":setTabActive(tab3.id)}})}),buttonStartTimer.addEventListener("click",function(){buttonStartTimer.classList.add("disable"),buttonSkipTimer.classList.add("active"),startTimer(activeTab.time,activeTab.id)}),buttonSkipTimer.addEventListener("click",timeExpired),updateDisplayTime(activeTab.time);var todoForm=document.querySelector(".todos__form"),todoInput=todoForm.querySelector(".todos__input .input-inner"),todoList=document.querySelector(".todos__list"),tasksLS="Tasks",tasks=[];function loadTasks(){var t=localStorage.getItem(tasksLS);null!==t&&JSON.parse(t).forEach(function(t){showTodo(t.name)})}function saveTodo(){localStorage.setItem(tasksLS,JSON.stringify(tasks))}function delTodo(t){var e=t.target.parentNode.parentNode,t=tasks.filter(function(t){return t.id!==parseInt(e.id)});todoList.removeChild(e),tasks=t,saveTodo()}function clearTodo(){todoList.innerHTML="",tasks=[],saveTodo()}function showTodo(t){var e=tasks.length+1,n=document.createElement("button"),i=document.createElement("button"),a=(n.classList.add("todo__btn"),n.innerHTML='<img src="images/menu.png" alt="">',i.classList.add("todo__settings-save"),i.innerText="Сохранить",'\n    <li class="todos__item todo" id='.concat("todo-"+e,'>\n        <div class="todo__settings hide">\n            <div class="todo__settings-inner">\n                <div class="todo__settings-item">\n                    <p>Изменить текст:</p>\n                    <label class="todo__input input">\n                    <input class="input-inner" type="text" name="changeInput"\n                    value="').concat(t,'" placeholder="Введите текст"></label>\n                </div>\n                <div class="todo__settings-item">\n                    <p>Введите количество помодоро:</p>\n                    <label class="todo__input-nubmer input-nubmer">\n                        <input class="todo__pomo-time input-nubmer__inner" name="countPomo" value="1" type="number">\n                        <button class="input-nubmer__plus" type="button">+</button>\n                        <button class="input-nubmer__minus" type="button">-</button>\n                    </label>\n                </div>\n            </div>\n        </div>\n        <div class="todo__main">\n            <div class="todo__checkbox checkbox">\n                <svg viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">\n                    <circle cx="25" cy="25" r="25" />\n                    <path\n                        d="M34.8732 11.1239L25.7798 36.2608C25.5067 37.0157 24.5003 37.1573 24.0295 36.5071L16.8731 26.6239"\n                        stroke="white" stroke-width="3" />\n                </svg>\n            </div>\n            <div class="todo__text">').concat(t,"</div>\n        </div>\n    </li>"));todoList.insertAdjacentHTML("afterbegin",a),todoList.children[0].append(n),todoList.children[0].children[0].append(i),tasks.push({name:t,id:e}),saveTodo(),inputNum(),n.addEventListener("click",toggleSettings),i.addEventListener("click",saveSettings)}function submitHangler(t){t.preventDefault(),showTodo(todoInput.value),todoInput.value=""}function toggleSettings(t){var t=t.target,e=t.parentNode.children[0],n=t.parentNode.children[1];t.classList.toggle("hide"),n.classList.toggle("hide"),e.classList.toggle("hide")}function saveSettings(t){var t=t.target,e=t.parentNode,n=t.parentNode.parentNode.children[1],t=t.parentNode.parentNode.children[2];n.classList.toggle("hide"),t.classList.toggle("hide"),e.classList.toggle("hide")}function init(){loadTasks(),todoForm.addEventListener("submit",submitHangler)}function inputNum(){document.querySelectorAll(".input-nubmer").forEach(function(t){var e=t.querySelector(".input-nubmer__plus"),n=t.querySelector(".input-nubmer__minus"),i=t.querySelector(".input-nubmer__inner"),a=i.value;e.addEventListener("click",function(){++a,i.value=i.value<0?0:a,updatePomodos(a)}),n.addEventListener("click",function(){1<a&&--a,i.value=i.value<0?0:a,updatePomodos(a)})})}function updatePomodos(t){tab1.time=tab1.defaultTime*t,updateDisplayTime(tab1.time)}init();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,